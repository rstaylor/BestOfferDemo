/// This class is generated by the BestOffer.BP.BidAcceptanceBpl BPL class.
/// This class should not be edited or modified in any way.
/// Do not make direct use of this class in your application.
Class BestOffer.BP.BidAcceptanceBpl.Thread1 Extends Ens.BP.Thread [ ClassType = persistent, CompileAfter = BestOffer.BP.BidAcceptanceBpl, GeneratedBy = Ens.BPL.Compiler.CLS, ProcedureBlock ]
{

Method S1(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 #; --- Begin Call Notify via Email ---
 #; --- Begin Request ---
 Set callrequest=##class(BestOffer.Message.NotifyRequest).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Set status=$$$OK,callrequest.BidThreadID=request.BidThreadID
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.Subject="Your bid has been accepted!"
 If $$$ISERR(status) Quit
 Set status=..MakeAsyncCall("","Notify Buyer",callrequest,"Notify via Email",1,0,"Notify via Email",0)
 If $$$ISERR(status) Quit
 Kill callrequest
 #; --- End Request ---
 #; --- End Call Notify via Email ---
 #; --- Begin Call Buyer Acknowledgement ---
 #; --- Begin Request ---
 Set callrequest=##class(EnsLib.Workflow.TaskRequest).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Set status=$$$OK,callrequest.%Actions="Accept,Reject"
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.%Message="Final Item confirmation"
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.%FormFields="ItemId,Item,SellerID,Value,Weight,OriginationZip,Bid Amount,Agreed Cost of Item"
 If $$$ISERR(status) Quit
 Set status=callrequest.%FormValues.SetAt(##class(BestOffer.Data.BidThread).%OpenId(request.BidThreadID).Item.Seller.%Id(),"SellerID")
 If $$$ISERR(status) Quit
 Set status=callrequest.%FormValues.SetAt(##class(BestOffer.Data.BidThread).%OpenId(request.BidThreadID).Item.OriginationAddress.Zip,"OriginationZip")
 If $$$ISERR(status) Quit
 Set status=callrequest.%FormValues.SetAt(##class(BestOffer.Data.BidThread).%OpenId(request.BidThreadID).Item.Value,"Value")
 If $$$ISERR(status) Quit
 Set status=callrequest.%FormValues.SetAt(##class(BestOffer.Data.BidThread).%OpenId(request.BidThreadID).Item.Weight,"Weight")
 If $$$ISERR(status) Quit
 Set status=callrequest.%FormValues.SetAt(##class(BestOffer.Data.BidThread).%OpenId(request.BidThreadID).Item.%Id(),"ItemId")
 If $$$ISERR(status) Quit
 Set status=callrequest.%FormValues.SetAt(##class(BestOffer.Data.BidThread).%OpenId(request.BidThreadID).Item.Description,"Item")
 If $$$ISERR(status) Quit
 Set status=callrequest.%FormValues.SetAt(context.BidAmount,"Bid Amount")
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.%UserName=##class(BestOffer.Data.BidThread).%OpenId(request.BidThreadID).Buyer.Contact
 If $$$ISERR(status) Quit
 Set status=callrequest.%FormValues.SetAt(##class(BestOffer.Data.BidThread).%OpenId(request.BidThreadID).FinalBidAmount,"Agreed Cost of Item")
 If $$$ISERR(status) Quit
 Set status=..MakeAsyncCall("OnResponse1","Buyer Acknowledgement",callrequest,"Buyer Acknowledgement",1,0,"Buyer Acknowledgement",1)
 If $$$ISERR(status) Quit
 Kill callrequest
 #; --- End Request ---
 #; --- End Call Buyer Acknowledgement ---
 Do ..%PendingResponses.Clear(),..%SyncResponses.Clear()
 Set ..%SyncTimedOut=0,..%PendingTimeout="",..%PendingAlarmHandle="",..%SyncName=""
 If ..%Process.IsResponsePending("Buyer Acknowledgement") Do ..%PendingResponses.SetAt("","Buyer Acknowledgement")
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S3"
 } else {
    Set ..%NextState="S2",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S1") Goto Exit
}

Method S2(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S3"
 } else {
    Set ..%NextState="S2",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S2") Goto Exit
}

Method S3(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 If (context.Action="Accept") {
 Set ..%NextState="S5"
 } else {
 Set ..%NextState="S4"
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S3") Goto Exit
}

Method S4(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 Do process.ClearAllPendingResponses()
 Set ..%NextState="Stop"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S4") Goto Exit
}

Method S5(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 Set status=$$$OK,status=context.CloseItem(request)
 If $$$ISERR(status) Quit
 #; --- Begin Call Notify via Email ---
 #; --- Begin Request ---
 Set callrequest=##class(BestOffer.Message.NotifyRequest).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Set status=$$$OK,callrequest.BidThreadID=request.BidThreadID
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.Subject="Sale confirmed!"
 If $$$ISERR(status) Quit
 Set status=..MakeAsyncCall("","Notify Buyer",callrequest,"Notify via Email",1,0,"Notify via Email",0)
 If $$$ISERR(status) Quit
 Kill callrequest
 #; --- End Request ---
 #; --- End Call Notify via Email ---
 #; --- Begin Call Notify via Email ---
 #; --- Begin Request ---
 Set callrequest=##class(BestOffer.Message.NotifyRequest).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Set status=$$$OK,callrequest.BidThreadID=request.BidThreadID
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.Subject="Sale Confirmed!"
 If $$$ISERR(status) Quit
 Set status=..MakeAsyncCall("","Notify Seller",callrequest,"Notify via Email",1,0,"Notify via Email",0)
 If $$$ISERR(status) Quit
 Kill callrequest
 #; --- End Request ---
 #; --- End Call Notify via Email ---
 Set ..%NextState="S4"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S5") Goto Exit
}

Storage Default
{
<Type>%Storage.Persistent</Type>
}

}
