/// This class is generated by the BestOffer.BP.X12Bpl BPL class.
/// This class should not be edited or modified in any way.
/// Do not make direct use of this class in your application.
Class BestOffer.BP.X12Bpl.Thread1 Extends Ens.BP.Thread [ ClassType = persistent, CompileAfter = BestOffer.BP.X12Bpl, GeneratedBy = Ens.BPL.Compiler.CLS, ProcedureBlock ]
{

Method S1(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 Set iscTemp=context.NewRequest
 Set status=$classmethod("BestOffer.DTL.DTL204","Transform",request,.iscTemp,"")
 If $$$ISERR(status) Quit
 Set context.NewRequest=iscTemp
 Do ##class(Ens.Util.Trace).WriteTrace("user","BestOffer.BP.X12Bpl","S1","Transform completed")
 Do {
 set stat=##class(BestOffer.Data.Item).UpdateDB(context.NewRequest)
 set context.NewRequest=##class(BestOffer.Data.Item).%OpenId(context.NewRequest.RequestID)
 } while (0)
 If $$$ISERR(status) Quit
 If (request.GetValueAt("NTE(1):Description")'="") {
 Set ..%NextState="S3"
 } else {
 Set ..%NextState="S2"
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S1") Goto Exit
}

Method S2(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 Do process.ClearAllPendingResponses()
 Set ..%NextState="Stop"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S2") Goto Exit
}

Method S3(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 #; --- Begin Call Send initial email ---
 #; --- Begin Request ---
 Set callrequest=##class(BestOffer.Message.X12EmailRequest).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Set status=$$$OK,callrequest.Subject="New 204 message arrived with controlid=2345617"_context.NewRequest.RequestID
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.Body="There is a new Item request."
 If $$$ISERR(status) Quit
 Set status=..MakeAsyncCall("","X12 Email Notification",callrequest,"Send initial email",1,0,"Send initial email",0)
 If $$$ISERR(status) Quit
 Kill callrequest
 #; --- End Request ---
 #; --- End Call Send initial email ---
 #; --- Begin Call Get Approval ---
 #; --- Begin Request ---
 Set callrequest=##class(EnsLib.Workflow.TaskRequest).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Set status=$$$OK,callrequest.%Actions="Approved,Rejected"
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.%Message="Need to approve something!"
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.%FormFields="Comments,Amount"
 If $$$ISERR(status) Quit
 Set status=callrequest.%FormValues.SetAt(2700,"Amount")
 If $$$ISERR(status) Quit
 Set status=..MakeAsyncCall("OnResponse1","X12 Item Approval",callrequest,"Get Approval",1,0,"Get Approval",1)
 If $$$ISERR(status) Quit
 Kill callrequest
 #; --- End Request ---
 #; --- End Call Get Approval ---
 Do ..%PendingResponses.Clear(),..%SyncResponses.Clear()
 Set ..%SyncTimedOut=0,..%PendingTimeout="",..%PendingAlarmHandle="",..%SyncName=""
 If ..%Process.IsResponsePending("Get Approval") Do ..%PendingResponses.SetAt("","Get Approval")
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S5"
 } else {
    Set ..%NextState="S4",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S3") Goto Exit
}

Method S4(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S5"
 } else {
    Set ..%NextState="S4",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S4") Goto Exit
}

Method S5(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 #; --- Begin Call Send approve/reject email ---
 #; --- Begin Request ---
 Set callrequest=##class(BestOffer.Message.X12EmailRequest).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Set status=$$$OK,callrequest.Subject=context.WFUsername_" has changed status of Item ID:2345617"_context.NewRequest.RequestID
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.Body="Status has changed to "_context.Approved
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.Comments=context.WFComments.GetAt("Comments")
 If $$$ISERR(status) Quit
 Set status=..MakeAsyncCall("OnResponse2","X12 Email Notification",callrequest,"Send approve/reject email",1,0,"Send approve/reject email",0)
 If $$$ISERR(status) Quit
 Kill callrequest
 #; --- End Request ---
 #; --- End Call Send approve/reject email ---
 If (context.Approved="Approved") {
 Set ..%NextState="S7"
 } else {
 Set ..%NextState="S8"
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S5") Goto Exit
}

Method S6(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 Set ..%NextState="S2"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S6") Goto Exit
}

Method S7(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 Do ##class(Ens.Util.Trace).WriteTrace("user","BestOffer.BP.X12Bpl","S7","Approved!")
 #; --- Begin Call Forward on 204 ---
 #; --- Begin Request ---
 Set callrequest=##class(EnsLib.EDI.X12.Document).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Set status=$$$OK,callrequest=request
 If $$$ISERR(status) Quit
 Set status=..MakeAsyncCall("","X12 Outbound",callrequest,"Forward on 204",1,0,"Forward on 204",0)
 If $$$ISERR(status) Quit
 Kill callrequest
 #; --- End Request ---
 #; --- End Call Forward on 204 ---
 Set ..%NextState="S6"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S7") Goto Exit
}

Method S8(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = objectscript, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 Do ##class(Ens.Util.Trace).WriteTrace("user","BestOffer.BP.X12Bpl","S8","Rejected!")
 Set ..%NextState="S6"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S8") Goto Exit
}

Storage Default
{
<Type>%Storage.Persistent</Type>
}

}
